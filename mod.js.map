{"version":3,"file":"mod.js","sources":["../d1641002fefc5593d795a2f980b75d","../lib/index.js"],"sourcesContent":["export default '/home/runner/work/math-strided-special-dmskramp/math-strided-special-dmskramp/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the ramp function for each element in a double-precision floating-point strided array `x` according to a strided mask array and assign the results to elements in a double-precision floating-point strided array `y`.\n*\n* @module @stdlib/math-strided-special-dmskramp\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var Uint8Array = require( '@stdlib/array-uint8' );\n* var dmskramp = require( '@stdlib/math-strided-special-dmskramp' );\n*\n* var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0, -5.9 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 1 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* dmskramp( x.length, x, 1, m, 1, y, 1 );\n* // y => <Float64Array>[ 1.1, 2.5, 0.0, 4.0, 0.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var Uint8Array = require( '@stdlib/array-uint8' );\n* var dmskramp = require( '@stdlib/math-strided-special-dmskramp' );\n*\n* var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0, -5.9 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 1 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* dmskramp.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 );\n* // y => <Float64Array>[ 1.1, 2.5, 0.0, 4.0, 0.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( !(tmp instanceof Error) ) {\n\tmain = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],"names":["join","require","tryRequire"],"mappings":";;AAAA,ICoDAA,EAAAC,QAAA,QAAAD,KACAE,EAAAD,QAAA,6BACAA,QAAA,aAKAC,EAAAF,ED3De,oFC2Df"}